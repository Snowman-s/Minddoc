「uniencode.src」を　コンパイル。
「unidecode.src」を　コンパイル。
「sHTMLCode.src」を　コンパイル。

出力パスは　文字列実体　長さ　２０４バイト。
ソースコードパスは　文字列実体　長さ　２００バイト。
検索パスは　文字列実体　長さ　２０２バイト。
操作ファイル名は　文字列実体　長さ　２００バイト。
ソースコードファイルは　ファイル。
書き込み中ファイルは　ファイル。
単語定義中フラグは　ワード変数。

（・ー＞・）
エラー処理とは
    エラー？　ならば
        エラー文字列で　重大エラー
    つぎに。

（ＳＪＩＳ文字列ー＞・）
ＵＴＦ８出力とは　本定義
    Native→UTF8変換し　
    書き込み中ファイルに　一行書き込み。

（ＳＪＩＳ文字列ー＞・）
ＵＴＦ８改行無し出力とは
    Native→UTF8変換し　
    書き込み中ファイルに　書き込み。

（文字列ー＞文字列）
HTML一文字文字列置換とは
    置換文字列は　文字列
    置換文字列に　入れ
    置換文字列で　文字列事例をとる
        「<」なら　「&lt;」
        「>」なら　「&gt;」
        例外なら　置換文字列
    事例終わり。

（文字列ー＞・）
単語定義検索し書き込みとは
    全体検査文字列は　文字列
    検査文字列は　文字列
    全体検査文字列に　入れ

    ここから
        全体検査文字列より　単語切り出し
        検査文字列に　入れ
        検査文字列が　空列？　ならば
            打ち切り
        つぎに
        単語定義中フラグが　真？　ならば
            検査文字列の　右端文字が　'。'に　等しい　ならば
                単語定義中フラグを　クリアし
            つぎに
        さもなければ
            検査文字列の　右端文字が　'は'に　等しい　ならば
                単語定義中フラグを　セットし
                <h3>
                ここから
                    検査文字列より　１文字　切り出し
                    複写し　空列？　ならば　
                        捨て　打ち切り
                    つぎに
                    HTML一文字文字列置換し　ＵＴＦ８改行無し出力し
                繰り返し
                </h3>
            つぎに
        つぎに
    繰り返し。

（ファイル名ー＞・）
指定ソースコードのドキュメント出力とは
    完全ファイル名は　文字列
    トリミングファイル名は　文字列

    完全ファイル名に　入れ
    完全ファイル名より　４バイトだけ　右側取り出しし
    「.src」と　等しい文字列　でなければ
        終わり
    つぎに

    完全ファイル名より
    完全ファイル名の　文字数から
    ソースコードパスの　文字数を　引いたぶん
    右側取り出して

    トリミングファイル名に　入れ

    トリミングファイル名を　一行表示

    出力パスと　トリミングファイル名で　絶対パスと相対パスをマージし
    操作ファイル名に　入れ

    操作ファイル名の　パス名を得て　複写し　ディレクトリ有り？　ならば
        捨て
    さもなければ
        ディレクトリ作成し
        エラー処理し
    つぎに

    操作ファイル名の　主ファイル名を得て　「.html」を　合成し　
    書き込み中ファイルを　新規オープンし
    エラー処理し

    完全ファイル名で　ソースコードファイルを　オープンし
    エラー処理し

    「<!DOCTYPE HTML>」を　ＵＴＦ８出力し

    「<html lang="ja">」を　ＵＴＦ８出力し

    <head>
    <title>
    トリミングファイル名を　ＵＴＦ８出力し
    </title>

    「<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">」を　ＵＴＦ８出力し
    </head>

    <body>
    ここから
        ソースコードファイルより　一行読み出し
        データ終わり？　ならば　捨て　打ち切り　つぎに
        ＵＴＦ８→ＳＪＩＳ変換し
        単語定義検索し書き込み
        エラー処理し
    繰り返し
    </body>
    </html>

    書き込み中ファイルを　クローズし
    ソースコードファイルを　クローズし
    エラー処理し。

（ファイル名ー＞・）
※再帰
指定フォルダのドキュメント出力とは
    フォルダ名は　文字列
    使用タイムスタンプは　構造体　タイムスタンプ型

    フォルダ名に　入れ

    フォルダ名と　使用タイムスタンプで　最初のファイル検索し　偽？　ならば
        終わり
    つぎに

    ここから
        使用タイムスタンプの　発見ファイル名をつみ
        使用タイムスタンプが  ディレクトリ？　ならば
            「\*」を　合成し
            指定フォルダのドキュメント出力し
        さもなければ
            指定ソースコードのドキュメント出力し
        つぎに
        使用タイムスタンプで　次のファイル検索し　偽？　ならば
            終わり
        つぎに
    繰り返し。

メインとは
    起動引数個数が　ゼロ？　ならば
        「Usage:sminddoc <folder_name>」を　エラー登録し
        エラー表示し
        終わり
    つぎに
    Unicodeエンコードテーブルを読み出し　真？　でなければ
        「Unicodeエンコードテーブル読み出し失敗」を　エラー登録し
        エラー表示し
        終わり
    つぎに
    Unicodeデコードテーブルを読み出し　真？　でなければ
        「Unicodeデコードテーブル読み出し失敗」を　エラー登録し
        エラー表示し
        終わり
    つぎに

    単語定義中フラグを　クリアし
    カレントディレクトリと　起動引数（１）とで　絶対パスと相対パスをマージし
    ソースコードパスに　入れ

    ソースコードパスと　「.\doc」で　絶対パスと相対パスをマージし
    出力パスに　入れ

    出力パスが　ディレクトリ有り？　でなければ
        出力パスで　ディレクトリ作成し
        エラー処理し
    つぎに

    ソースコードパスと　「.\*」で　絶対パスと相対パスをマージし
    検索パスに　入れ

    検索パスで　指定フォルダのドキュメント出力し

    「終了時」で　このメッセージでスタック検査。